
<%
    OneApi=tags['$OneApi']
    x=tags['$x']
    X=x.upper()
%>
===================
 Contribution Guide
===================

This contribution guide explains how to contribute to the Unified Runtime 
project and what processes you must follow in order to have your changes 
accepted into the project.


Updating the Specification
==========================

The specification and many other components of Unified Runtime are generated 
from a set of ``*.yml`` files located in the ``scripts/core/`` directory of the 
project. To make a change to the specification you should modify only ``*.yml`` 
files in this directory. To see the changes reflected in the specification you 
`must` build the ``generate`` target. When making changes to the specification 
you should commit all changes generated by the script as part of your change. 
Refer to ``scripts/YaML.md`` on the yaml syntax as well as detailed descriptions 
of required fields for each type of entity.

Naming Conventions
~~~~~~~~~~~~~~~~~~

Additional to what is described in the Yaml syntax document. You should follow
the following naming convention for argument names.

    * Entry-Points use ``camelCase`` conventions i.e ``${x}DeviceGet``.

    * Argument names are also `camelCase` and are prefixed with a type 
      indicator:

        * Pointer arguments are prefixed with ``p`` or ``pp`` for double pointer 
          i.e. ``pEvent``.

        * Handle arguments are prefixed with ``h`` i.e. ``hQueue``.




Forks and Pull Requests
=======================

To submit a pull request to Unified Runtime, you must first create your own 
personal fork of the project and submit your changes to a branch. By convention 
we name our branches ``<your_name>/<short_description>``, where the description 
indicates the intent of your change. You can then raise a pull request targeting 
``oneapi-src/unified-runtime:main``.

Before your pull request is merged it `must` be reviewed by no less than two 
code owners of the project `and` be passing all required CI jobs.


Conformance Testing
===================

For contributions to the specification you should include appropriate 
conformance tests as part of your change. The conformance tests can be found 
under ``test/conformance/<component>``, where component refers to a set of 
entry-points i.e. platform, enqueue, device. The conformance tests, at a 
minimum, should cover at least one test for each of the possible error codes 
returned, excluding any disaster cases like 
``${X}_RESULT_ERROR_OUT_OF_HOST_MEMORY`` or similar.Conformance tests should not
assume anything about the underlying adapter on which they are run against and
should pass on any conformant adapter.
